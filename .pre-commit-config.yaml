---
# ============================================================================
# PRE-COMMIT CONFIGURATION - ULTRA-STRICT AUTOMATED QUALITY CHECKS
# ============================================================================
# Run: pre-commit install
# Usage: pre-commit run --all-files

default_language_version:
  python: python3.12

default_stages: [commit, push]

fail_fast: false  # Run all hooks even if one fails

repos:
  # ============================================================================
  # PRE-COMMIT HOOKS - BASIC FILE CHECKS
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-json
      - id: check-merge-conflict
      - id: check-shebang-scripts-are-executable
      - id: check-symlinks
      - id: check-toml
      - id: check-xml
      - id: check-yaml
        args: ["--safe"]
      - id: debug-statements
      - id: destroyed-symlinks
      - id: detect-private-key
      - id: end-of-file-fixer
      - id: fix-byte-order-marker
      - id: fix-encoding-pragma
        args: ["--remove"]
      - id: forbid-new-submodules
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: name-tests-test
        args: ["--pytest-test-first"]
      - id: no-commit-to-branch
        args:
          ["--branch", "main", "--branch", "master", "--branch", "production"]
      - id: pretty-format-json
        args: ["--autofix", "--indent=2", "--no-sort-keys"]
      - id: requirements-txt-fixer
      - id: sort-simple-yaml
      - id: trailing-whitespace
        args: ["--markdown-linebreak-ext=md"]

  # ============================================================================
  # PYUPGRADE - UPGRADE SYNTAX TO MODERN PYTHON
  # ============================================================================
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.16.0
    hooks:
      - id: pyupgrade
        args: ["--py311-plus", "--keep-runtime-typing"]

  # ============================================================================
  # ISORT - IMPORT SORTING
  # ============================================================================
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (python)
        args: ["--profile", "black", "--filter-files"]

  # ============================================================================
  # BLACK - CODE FORMATTING
  # ============================================================================
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        language_version: python3.12
        args: ["--config", "pyproject.toml"]

  # ============================================================================
  # RUFF - ULTRA-FAST PYTHON LINTER
  # ============================================================================
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.0
    hooks:
      # Run the linter
      - id: ruff
        args: ["--fix", "--exit-non-zero-on-fix"]
      # Run the formatter
      - id: ruff-format

  # ============================================================================
  # MYPY - STATIC TYPE CHECKING
  # ============================================================================
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.0
    hooks:
      - id: mypy
        args:
          [
            "--strict",
            "--config-file=pyproject.toml",
            "--install-types",
            "--non-interactive",
          ]
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-toml
          - types-redis
          - types-setuptools
          - pydantic

  # ============================================================================
  # PYLINT - COMPREHENSIVE CODE ANALYSIS
  # ============================================================================
  - repo: https://github.com/PyCQA/pylint
    rev: v3.2.0
    hooks:
      - id: pylint
        args:
          [
            "--rcfile=pyproject.toml",
            "--fail-under=9.5",
            "--output-format=colorized",
          ]
        additional_dependencies:
          - pylint-django
          - pylint-pytest

  # ============================================================================
  # BANDIT - SECURITY VULNERABILITY SCANNER
  # ============================================================================
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml", "-r", "service/"]
        additional_dependencies: ["bandit[toml]"]

  # ============================================================================
  # PYDOCSTYLE - DOCSTRING STYLE CHECKER
  # ============================================================================
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: ["--config=pyproject.toml"]
        additional_dependencies: [tomli]

  # ============================================================================
  # VULTURE - DEAD CODE DETECTOR
  # ============================================================================
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.11
    hooks:
      - id: vulture
        args: ["--min-confidence", "80", "service/"]

  # ============================================================================
  # INTERROGATE - DOCSTRING COVERAGE CHECKER
  # ============================================================================
  - repo: https://github.com/econchick/interrogate
    rev: 1.7.0
    hooks:
      - id: interrogate
        args:
          [
            "--verbose",
            "--fail-under=80",
            "--ignore-init-method",
            "--ignore-init-module",
            "--ignore-magic",
            "--ignore-module",
            "--ignore-private",
            "--ignore-semiprivate",
            "service/",
          ]

  # ============================================================================
  # DOCFORMATTER - DOCSTRING FORMATTER
  # ============================================================================
  - repo: https://github.com/PyCQA/docformatter
    rev: v1.7.5
    hooks:
      - id: docformatter
        args:
          [
            "--in-place",
            "--wrap-summaries=88",
            "--wrap-descriptions=88",
            "--blank",
            "--make-summary-multi-line",
            "--close-quotes-on-newline",
          ]

  # ============================================================================
  # CODESPELL - SPELL CHECKER
  # ============================================================================
  - repo: https://github.com/codespell-project/codespell
    rev: v2.3.0
    hooks:
      - id: codespell
        args:
          [
            "--skip=*.json,*.yaml,*.yml,*.lock,.git,__pycache__,build,dist,*.egg-info",
            "--ignore-words-list=crate,nd,sav,ba,te,fo",
          ]

  # ============================================================================
  # SHELLCHECK - SHELL SCRIPT LINTING
  # ============================================================================
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        args: ["--severity=warning"]

  # ============================================================================
  # YAMLLINT - YAML LINTING
  # ============================================================================
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: ["--strict"]

  # ============================================================================
  # LOCAL HOOKS - CUSTOM QUALITY CHECKS
  # ============================================================================
  - repo: local
    hooks:
      # Check for TODO/FIXME comments
      - id: check-todos
        name: Check for TODO/FIXME comments
        entry: |
          python -c "
          import sys
          import re
          files = sys.argv[1:]
          pattern = re.compile(r'#\s*(TODO|FIXME|XXX|HACK|BUG)', re.IGNORECASE)
          matches = [(f, i+1, line.strip()) for f in files 
                     for i, line in enumerate(open(f)) if pattern.search(line)]
          for f, l, line in matches:
              print(f'{f}:{l}: {line}')
          sys.exit(1 if matches else 0)
          "
        language: system
        types: [python]
        pass_filenames: true

      # Check for print statements
      - id: check-print-statements
        name: Check for print statements (use logging)
        entry: |
          python -c "
          import sys
          import re
          files = [f for f in sys.argv[1:] if 'test' not in f]
          pattern = re.compile(r'^\s*print\s*\(', re.MULTILINE)
          matches = []
          for f in files:
              for i, line in enumerate(open(f)):
                  if pattern.search(line):
                      matches.append((f, i+1))
          for f, l in matches:
              print(f'{f}:{l}: Found print() statement')
          sys.exit(1 if matches else 0)
          "
        language: system
        types: [python]
        pass_filenames: true

      # Check for hardcoded secrets
      - id: check-secrets
        name: Check for hardcoded secrets
        entry: |
          python -c "
          import sys
          import re
          files = sys.argv[1:]
          patterns = [
              r'password\s*=\s*[\'\"].{3,}[\'\"]',
              r'api[_-]?key\s*=\s*[\'\"].{8,}[\'\"]',
              r'secret\s*=\s*[\'\"].{8,}[\'\"]',
              r'token\s*=\s*[\'\"].{8,}[\'\"]',
              r'key\s*=\s*[\'\"].{8,}[\'\"]'
          ]
          matches = []
          for f in files:
              for i, line in enumerate(open(f)):
                  for p in patterns:
                      if re.search(p, line, re.IGNORECASE):
                          matches.append((f, i+1, line.strip()))
          for f, l, line in matches:
              print(f'{f}:{l}: Potential hardcoded secret: {line}')
          sys.exit(1 if matches else 0)
          "
        language: system
        types: [python]
        pass_filenames: true

      # Check complexity with radon
      - id: radon-complexity
        name: Check cyclomatic complexity
        entry: |
          python -c "
          import sys
          import subprocess
          import os
          files = [f for f in sys.argv[1:] if f.endswith('.py')]
          if files:
              # Filter to only service/ files if they exist
              service_files = [f for f in files if f.startswith('service/')]
              if service_files:
                  result = subprocess.run(['radon', 'cc', '--min', 'C', 
                                           '--show-complexity', '--total-average'] + service_files, 
                                           capture_output=True, text=True)
                  print(result.stdout)
                  if result.stderr:
                      print(result.stderr, file=sys.stderr)
                  sys.exit(1 if result.returncode != 0 else 0)
              else:
                  print('No service/ Python files to check')
                  sys.exit(0)
          else:
              print('No Python files provided')
              sys.exit(0)
          "
        language: system
        types: [python]
        pass_filenames: true

      # Check maintainability index
      - id: radon-maintainability
        name: Check maintainability index
        entry: |
          python -c "
          import sys
          import subprocess
          import os
          files = [f for f in sys.argv[1:] if f.endswith('.py')]
          if files:
              # Filter to only service/ files if they exist
              service_files = [f for f in files if f.startswith('service/')]
              if service_files:
                  result = subprocess.run(['radon', 'mi', '--min', 'B', '--show'] + service_files, 
                                           capture_output=True, text=True)
                  print(result.stdout)
                  if result.stderr:
                      print(result.stderr, file=sys.stderr)
                  sys.exit(1 if result.returncode != 0 else 0)
              else:
                  print('No service/ Python files to check')
                  sys.exit(0)
          else:
              print('No Python files provided')
              sys.exit(0)
          "
        language: system
        types: [python]
        pass_filenames: true
