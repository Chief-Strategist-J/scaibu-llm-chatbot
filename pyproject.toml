[tool.poetry]
name = "llm_chatbot_python"
version = "0.1.0"
description = "Ultra-strict LLM chatbot with maximum code quality enforcement"
authors = ["Your Name <your.email@example.com>"]

[tool.poetry.dependencies]
python = "^3.12"
temporalio = "^1.8.0"
docker = "^7.0.0"

# OpenTelemetry Dependencies
opentelemetry-api = "^1.28.0"
opentelemetry-sdk = "^1.28.0"
opentelemetry-exporter-otlp = "^1.28.0"
opentelemetry-instrumentation = "^0.49b0"
opentelemetry-instrumentation-requests = "^0.49b0"
opentelemetry-instrumentation-logging = "^0.49b0"

# Redis Dependencies
redis = "^5.0.0"
redis-py-cluster = "^2.1.0"

[tool.poetry.group.dev.dependencies]
# LINTING & CODE QUALITY - MAXIMUM STRICTNESS TOOLS
ruff = "^0.6.0"
mypy = "^1.11.0"
pylint = "^3.2.0"
flake8 = "^7.1.0"
flake8-docstrings = "^1.7.0"
flake8-annotations = "^3.1.0"
flake8-bugbear = "^24.4.0"
flake8-comprehensions = "^3.15.0"
flake8-simplify = "^0.21.0"
flake8-cognitive-complexity = "^0.1.0"
flake8-eradicate = "^1.5.0"
flake8-bandit = "^4.1.0"
flake8-pytest-style = "^2.0.0"
pep8-naming = "^0.14.0"
pylint-django = "^2.5.5"
pylint-pytest = "^1.1.0"
bandit = "^1.7.9"
radon = "^6.0.1"
black = "^24.4.0"
isort = "^5.13.0"
pydocstyle = "^6.3.0"
pyupgrade = "^3.16.0"
vulture = "^2.11"
xenon = "^0.9.3"
pre-commit = "^3.7.0"
pytest-cov = "^7.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# RUFF CONFIGURATION - ULTRA-STRICT ALL-IN-ONE LINTER
# ============================================================================
[tool.ruff]
# Target Python 3.12+
target-version = "py312"
line-length = 88
indent-width = 4

# ZERO TOLERANCE - Include all possible directories
include = ["*.py", "*.pyi"]
extend-include = ["*.ipynb"]

# Exclude ONLY generated files
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# ENABLE ALL POSSIBLE RULES - MAXIMUM STRICTNESS
select = [
    "ALL",  # Enable literally everything
]

# MINIMAL IGNORES - Only truly impossible rules
ignore = [
    "D203",    # Conflicts with D211
    "D213",    # Conflicts with D212
    "COM812",  # Conflicts with formatter
    "ISC001",  # Conflicts with formatter
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
]

# ABSOLUTELY NO UNFIXABLE RULES - Everything must be fixed
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# MAXIMUM STRICTNESS per-file settings
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]  # Allow unused imports in __init__.py
"test_*.py" = ["S101", "PLR2004", "ANN201"]  # Allow assert and magic values in tests
"**/tests/**/*.py" = ["S101", "PLR2004", "ANN201"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
mypy-init-return = true
suppress-dummy-args = false
suppress-none-returning = false

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "type", "input", "filter", "format"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = false

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true
parametrize-names-type = "tuple"
parametrize-values-type = "tuple"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.isort]
force-single-line = false
force-sort-within-sections = true
known-first-party = ["service"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.mccabe]
max-complexity = 5  # ULTRA-STRICT complexity limit

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]
staticmethod-decorators = ["staticmethod"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = false
max-doc-length = 88
max-line-length = 88

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google docstring style
property-decorators = ["property", "cached_property"]

[tool.ruff.lint.pylint]
allow-magic-value-types = []  # No magic values allowed
max-args = 5  # Maximum 5 arguments per function
max-bool-expr = 3  # Maximum 3 boolean expressions
max-branches = 8  # Maximum 8 branches
max-locals = 10  # Maximum 10 local variables
max-nested-blocks = 3  # Maximum 3 nested blocks
max-positional-args = 3  # Maximum 3 positional arguments
max-public-methods = 15  # Maximum 15 public methods
max-returns = 4  # Maximum 4 return statements
max-statements = 30  # Maximum 30 statements

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# ============================================================================
# MYPY CONFIGURATION - ULTRA-STRICT TYPE CHECKING
# ============================================================================
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
strict_concatenate = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_any_unimported = true
disallow_any_expr = false  # Too strict, causes issues
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
no_implicit_reexport = true
local_partial_types = true
strict = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
    "possibly-undefined",
    "redundant-self",
]
disable_error_code = []
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
color_output = true
error_summary = true
implicit_reexport = false
namespace_packages = true
ignore_missing_imports = false
follow_imports = "normal"
follow_imports_for_stubs = true

# Per-module overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

# ============================================================================
# PYLINT CONFIGURATION - COMPREHENSIVE CODE ANALYSIS
# ============================================================================
[tool.pylint.main]
py-version = "3.12"
jobs = 0  # Auto-detect CPU cores
limit-inference-results = 100
persistent = true
suggestion-mode = true
fail-under = 9.5  # Minimum score required
fail-on = []

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
include-naming-hint = true

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 5  # Maximum arguments per function
max-attributes = 10  # Maximum attributes per class
max-bool-expr = 3  # Maximum boolean expressions
max-branches = 8  # Maximum branches
max-locals = 10  # Maximum local variables
max-parents = 7  # Maximum parent classes
max-public-methods = 15  # Maximum public methods
max-returns = 4  # Maximum return statements
max-statements = 30  # Maximum statements
min-public-methods = 1  # Minimum public methods

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
max-line-length = 88
max-module-lines = 500  # Maximum lines per module
indent-string = "    "
expected-line-ending-format = "LF"

[tool.pylint.imports]
allow-wildcard-with-all = false
deprecated-modules = []

[tool.pylint.logging]
logging-format-style = "new"
logging-modules = ["logging"]

[tool.pylint.messages_control]
disable = [
    "C0330",  # Wrong hanging indentation before block (conflicts with black)
    "C0326",  # Bad whitespace (conflicts with black)
    "R0903",  # Too few public methods (pydantic models)
]
enable = [
    "all",
]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO", "HACK", "BUG"]

[tool.pylint.refactoring]
max-nested-blocks = 3
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
output-format = "colorized"
reports = true
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.typecheck]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.variables]
allow-global-unused-variables = false
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignored-argument-names = "^_.*$"
init-import = false
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]

# ============================================================================
# BLACK CONFIGURATION - CODE FORMATTING
# ============================================================================
[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | build
  | dist
)/
'''

# ============================================================================
# ISORT CONFIGURATION - IMPORT SORTING
# ============================================================================
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
force_single_line = false
force_sort_within_sections = true
lexicographical = true
group_by_package = true
known_first_party = ["service"]
known_third_party = []
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]
no_lines_before = "LOCALFOLDER"
lines_after_imports = 2
honor_noqa = true
atomic = true
skip_gitignore = true

# ============================================================================
# BANDIT CONFIGURATION - SECURITY SCANNING
# ============================================================================
[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
    "build",
    "dist",
]
tests = [
    "B201",  # flask_debug_true
    "B301",  # pickle
    "B302",  # marshal
    "B303",  # md5
    "B304",  # ciphers
    "B305",  # cipher_modes
    "B306",  # mktemp_q
    "B307",  # eval
    "B308",  # mark_safe
    "B310",  # urllib_urlopen
    "B311",  # random
    "B312",  # telnetlib
    "B313",  # xml_bad_cElementTree
    "B314",  # xml_bad_ElementTree
    "B315",  # xml_bad_expatreader
    "B316",  # xml_bad_expatbuilder
    "B317",  # xml_bad_sax
    "B318",  # xml_bad_minidom
    "B319",  # xml_bad_pulldom
    "B320",  # xml_bad_etree
    "B321",  # ftplib
    "B323",  # unverified_context
    "B324",  # hashlib_new_insecure_functions
    "B401",  # import_telnetlib
    "B402",  # import_ftplib
    "B403",  # import_pickle
    "B404",  # import_subprocess
    "B405",  # import_xml_etree
    "B406",  # import_xml_sax
    "B407",  # import_xml_expat
    "B408",  # import_xml_minidom
    "B409",  # import_xml_pulldom
    "B410",  # import_lxml
    "B411",  # import_xmlrpclib
    "B412",  # import_httpoxy
    "B413",  # import_pycrypto
    "B501",  # request_with_no_cert_validation
    "B502",  # ssl_with_bad_version
    "B503",  # ssl_with_bad_defaults
    "B504",  # ssl_with_no_version
    "B505",  # weak_cryptographic_key
    "B506",  # yaml_load
    "B507",  # ssh_no_host_key_verification
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_true
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B608",  # hardcoded_sql_expressions
    "B609",  # linux_commands_wildcard_injection
    "B610",  # django_extra_used
    "B611",  # django_rawsql_used
    "B701",  # jinja2_autoescape_false
    "B702",  # use_of_mako_templates
    "B703",  # django_mark_safe
]
skips = []

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*.py"]

# ============================================================================
# PYDOCSTYLE CONFIGURATION - DOCSTRING ENFORCEMENT
# ============================================================================
[tool.pydocstyle]
convention = "google"
add-ignore = []
add-select = []
match = "(?!test_).*\\\\.py"
match-dir = "(?!tests|migrations|__pycache__|\\\\.)[^\\\\.].*"

# ============================================================================
# PYTEST CONFIGURATION - TESTING
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
    "--tb=short",
    "--cov=service",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=20",
]

# ============================================================================
# COVERAGE CONFIGURATION - CODE COVERAGE
# ============================================================================
[tool.coverage.run]
branch = true
source = ["service"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]
parallel = true
concurrency = ["thread"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == '__main__':",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
